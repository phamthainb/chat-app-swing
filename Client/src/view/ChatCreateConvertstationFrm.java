/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package view;

import control.ClientCtr;
import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import model.Conversation;
import model.ObjectWrapper;
import model.User;

/**
 *
 * @author hp
 */
public class ChatCreateConvertstationFrm extends javax.swing.JDialog {

    /**
     * Creates new form ChatCreateConvertstationFrm
     */
    private ClientCtr mySocket;
    private User user;
    Frame parent;
    private ArrayList<User> listFriend = new ArrayList<>();

    public ChatCreateConvertstationFrm(java.awt.Frame parent, boolean modal, ClientCtr mySocket, User user) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
        this.mySocket = mySocket;
        this.user = user;

        // DEFINE LIST FUNCTION 
        this.mySocket.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_CHAT_GET_LIST_FRIEND, this));
        this.mySocket.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_CHAT_CREATE_CONVERSTATION, this));
        this.mySocket.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_TRIGGER_STATUS, this));

        // call list friend
        getFriends();

    }

    void getFriends() {
        this.mySocket.sendData(new ObjectWrapper(ObjectWrapper.CHAT_GET_LIST_FRIEND, this.user.getId()));
    }

    public void receivedDataProcessing(ObjectWrapper data) {
        if (data.getPerformative() == ObjectWrapper.REPLY_TRIGGER_STATUS) {
            getFriends();
        } else {
            ArrayList<User> listFriendData = (ArrayList<User>) data.getData();
            this.listFriend = listFriendData;
            jLabel1.setText("Create converstaion (" + user.getUsername() + ")");
            mapListFriend();
        }
    }

    public void resultCreate(ObjectWrapper data) {
        if ((Boolean) data.getData()) {
            //JOptionPane.showMessageDialog(rootPane, "Success");
            this.dispose();
        } else {
            //JOptionPane.showMessageDialog(rootPane, "Got error");
        }
    }

    void mapListFriend() {
        DefaultListModel model = new DefaultListModel();
        jList1.setModel(model);
        model.removeAllElements();

        for (User user1 : listFriend) {
            String status = user1.getOnline() == 1 ? "online" : "offline";
            model.addElement(user1.getUsername() + "-" + status);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Create Convertstation");

        jLabel2.setText("List friend");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jButton1.setText("create");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(269, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(236, 236, 236))
            .addGroup(layout.createSequentialGroup()
                .addGap(267, 267, 267)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int[] listPicked = jList1.getSelectedIndices();

        if (listPicked.length >= 1) {
            ArrayList<User> listU = new ArrayList<>();
            listU.add(user);
            for (int index : listPicked) {
                listU.add(listFriend.get(index));
            }
            mySocket.sendData(new ObjectWrapper(ObjectWrapper.CHAT_CREATE_CONVERSTATION, listU));
        } else {
            JOptionPane.showMessageDialog(rootPane, "Pick at least 1 User for create an single or group converstation.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatCreateConvertstationFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatCreateConvertstationFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatCreateConvertstationFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatCreateConvertstationFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ChatCreateConvertstationFrm dialog = new ChatCreateConvertstationFrm(new javax.swing.JFrame(), true, null, null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
