/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import control.ClientCtr;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import model.Conversation;
import model.Message;
import model.ObjectWrapper;
import model.User;

/**
 *
 * @author phamthainb
 */
public class ChatDashboardFrm extends javax.swing.JFrame {

    private ClientCtr mySocket;
    private User user;
    List<Conversation> listConverstation = new ArrayList<>();

    /**
     * Creates new form ChatDashboard
     */
    public ChatDashboardFrm(ClientCtr mySocket, User user) {
        initComponents();

        this.mySocket = mySocket;
        this.user = user;

        // DEFINE LIST FUNCTION 
        this.mySocket.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_CHAT_GET_CONVERSTATION, this));
        this.mySocket.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_CHAT_CREATE_CONVERSTATION, this));
        // 
        //this.mySocket.getActiveFunction().add(new ObjectWrapper(ObjectWrapper.REPLY_CHAT_CREATE_MESSAGE_DASHBOARD, this));

        this.setTitle(user.getUsername());
        // call
        getListConverstation();
    }

    public void getListConverstation() {
        this.mySocket.sendData(new ObjectWrapper(ObjectWrapper.CHAT_GET_CONVERSTATION, this.user.getId()));
    }

    public void receivedDataProcessing(ObjectWrapper data) {
        if (data.getPerformative() == ObjectWrapper.REPLY_CHAT_CREATE_CONVERSTATION) {
            getListConverstation();
        }

        if (data.getPerformative() == ObjectWrapper.REPLY_CHAT_GET_CONVERSTATION) {
            ArrayList<Conversation> lconversation = (ArrayList<Conversation>) data.getData();
            this.listConverstation = lconversation;
        }
        mapListConverstation();
    }

    void mapListConverstation() {
        if (this.listConverstation.size() >= 0) {
            System.out.println("list " + this.listConverstation.size());

            String columns[] = {"id", "name"};
            String[][] values = new String[listConverstation.size()][columns.length];

            for (int i = 0; i < listConverstation.size(); i++) {
                Conversation c = (Conversation) listConverstation.get(i);
                //System.out.println("" + c.toString());
                values[i][0] = c.getId() + "";
                values[i][1] = c.getName() + "";
                //values[i][2] = c.getUsers().size() > 2 ? "group" : "single";
                //values[i][3] = c.getUsers().size() + "";
            }

            DefaultTableModel table = new DefaultTableModel(values, columns) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            jTable1.setModel(table);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("List converstation");

        jButton2.setText("create chat");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "name", "type"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(jLabel2)
                .addContainerGap(275, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(0, 355, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(63, 63, 63)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGap(34, 34, 34)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        ChatCreateFrm chatCreateConvertstationFrm = new ChatCreateFrm(this, rootPaneCheckingEnabled, mySocket, user);
        chatCreateConvertstationFrm.setVisible(true);
        chatCreateConvertstationFrm.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                getListConverstation();
                chatCreateConvertstationFrm.setVisible(false);
            }

        });
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        Conversation conversation = listConverstation.get(jTable1.getSelectedRow());
        openNewChatFrm(conversation);
    }//GEN-LAST:event_jTable1MouseClicked

    public ArrayList<Conversation> getListOpen() {
        return this.mySocket.getOpenConversation();
    }

    public ArrayList<Conversation> updateListOpen(ArrayList<Conversation> l) {
        return this.mySocket.updateOpenConversation(l);
    }

    void openNewChatFrm(Conversation conversation) {
        JFrame newChat = new ChatFrm(mySocket, user, conversation);
        newChat.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                ArrayList<Conversation> listOpenConverstation = getListOpen();
                listOpenConverstation.remove(conversation);
                updateListOpen(listOpenConverstation);
                //System.out.println("length " + listOpenConverstation.size());
            }
        });
        Thread t = new Thread(new MulJFrame(newChat));
        t.start();
        // sync
        ArrayList<Conversation> listOpenConverstation = getListOpen();
        listOpenConverstation.add(conversation);
        updateListOpen(listOpenConverstation);

        //System.out.println("length " + listOpenConverstation.size());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatDashboardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatDashboardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatDashboardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatDashboardFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatDashboardFrm(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
